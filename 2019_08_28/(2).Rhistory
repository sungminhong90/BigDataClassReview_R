install.packages("r Java")
install.packages('memoise')
install.packages('KoNLP')
install.packages("rJava")
library(rJava)
library(memoise)
library(KonLP)
library(KoNLP)
search()
data <- read.table("SpiderMan.txt")
data <- read.table("C:\\Python\\SpiderMan.txt")
?data
data <- read.table("C:\\Python\\SpiderMan.txt", sep = " ")
data <- read.table("C:\\Python\\SpiderMan.txt", sep = "")
data <- read.table(file = "C:\\Python\\SpiderMan.txt", header = True, sep = "")
data <- read.table(file = "SpiderMan.txt", header = True, sep = "")
data <- read.table(file = "SpiderMan.txt", header = True, sep = "")
?data
data <- read.table(file = "SpiderMan.txt", header = True, sep = "")
data <- read.table(file = "SpiderMan.txt", sep = "")
data <- read.csv("C:\\Python\\train.csv")
View(data)
rm(data)
data <- readLines(file = "SpiderMan.txt")
data <- readLines("SpiderMan.txt")
head(txt)
data <- readLines("SpiderMan.txt", encoding = 'utf-8') #read.table을 쓰면 안됨!!!
data
data <- readLines("SpiderMan.txt", encoding = 'UTF-8') #read.table을 쓰면 안됨!!!
data
df
### 결측치 처리하기
df <- data.frame(Pclass = c(1,2,3, NA, 1),
Embarked = c("C", "S", "Q", NA, NA),
Fare = c(NA, 150, 300,300,100))
df
## is.na(데이터셋)
is.na(df)
##결측치 갯수 확인
table(is.na(df))
## 각각의 컬럼별 결측치 확인
table(is.na(df$Pclass))
table(is.na(df$Embarked))
table(is.na(df$Fare))
## 결측치가 포함되면 정상적인 연산
mean(df$Pclass)
## 결측치/이상치가 있으면 자료 전처리를 해주어야 함
###
library(dplyr)
df %>% filter(!is.na(Pclass))
##실습 과제 3-2 ->Embakred NA 빼고/ Fare NA빼고/ 모든 NA를 빼고 출력
#1) embared 빼고
df %>% filter(!is.na(Embarked))
#2) Fare NA빼고
df %>% filter(!is.na(Fare))
#3) 모든 NA빼고
df %>% filter(!is.na(Pclass & Embarked & Fare))
#3) 모든 NA빼고
df %>% filter(!is.na(Pclass) & !is.na(Fare) & !is.na(Fare))
#3) 모든 NA빼고
df %>% filter(!is.na(Pclass) & !is.na(Embarked) & !is.na(Fare))
# Titanic data 결측치 처내기
titanic <- read.csv("C:\\Python\\train")
# Titanic data 결측치 처내기
titanic <- read.csv("C:\\Python\\train.csv")
titanic %>% filter(!is.na(Age))
view(titanic)
View(titanic)
# Titanic data 결측치 처내기
titanic <- read.csv("C:\\Python\\train.csv")
View(titanic)
titanic %>% filter(!is.na(Age))
table(is.na(titanic))
colSums(is.na(titanic))
##
mean(df$Pclass)
## na.rm = T
mean(df$Pclass, na.rm=T)
mean(df$Embarked, na.rm=T)
mean(df$Fare, na.rm=T)
### 데이터 선택
mtcars[seq[(1,10,1), ]]
### 데이터 선택
mtcars[seq[(1,10,1), ]
### 데이터 선택
mtcars[seq(1,10,1), ]
### 결측치 만들기
mc_part <- mtcars
mc_part[c(4,8), 'drat'] <- NA
mc_part
##
mc_part %>%  summerise (mean_drat=mean(drat, na.rm=T),
sum_drat=sum(drat, na.rm=T),
col3=median(drat, na.rm=T))
##
mc_part %>%  summarise (mean_drat=mean(drat, na.rm=T),
sum_drat=sum(drat, na.rm=T),
col3=median(drat, na.rm=T))
mc_part
##실습 4-1 qsec 4,8행의 데이터를 NA로 처리하고, mean, sum, median, var, sd 구하기
mc_part1 <- mtcars
mc_part1[c(4,8), 'qsec'] <- NA #4번째 열/ #8번째열 in Qsec column
mc_part1
# 여기서 mean 구하기
mc_part1 %>%  summarise (mean_qsec = mean(qsec, na.rm = T),
sum_qsec = sum(qsec, na.rm = T),
median_qsec = median(qsec, na.rm =T),
var_qsec = var(qsec, na.rm = T),
sd_qsec = sd(qsec, na.rm = T))
mc_part1
mc_part2 <- mtcars
mc_part2 <- mtcars
mc_part2 %>%
group_by(cyl) %>%
sumarise(mean)
mc_part2 %>%
group_by(cyl) %>%
summarise(mean)
mc_part2 %>%
group_by(cyl) %>%
summarise(mean_cyl = mean(cyl))
mc_part2 %>%
group_by(cyl) %>%
summarise(mean$cyl)
mc_part2 %>%
group_by(cyl) %>%
summarise(mean_cyl = mean(cyl))
mc_part2 %>%
group_by(cyl) %>%
summarise(mean_qsec = mean(qsec, na.rm = T),
sum_qsec = sum(qsec, na.rm = T),
median_qsec = median(qsec, na.rm =T),
var_qsec = var(qsec, na.rm = T),
sd_qsec = sd(qsec, na.rm = T))
mc_part3 <- mtcars
mc_part3 %>%
group_by(manufacturer, drv) %>%
summarise(mean_qsec = mean(qsec, na.rm = T),
sum_qsec = sum(qsec, na.rm = T),
median_qsec = median(qsec, na.rm =T),
var_qsec = var(qsec, na.rm = T),
sd_qsec = sd(qsec, na.rm = T))
mc_part3 %>%
group_by(manufacturer, drv) %>%
summarise(mean_qsec = mean(qsec, na.rm = T),
sum_qsec = sum(qsec, na.rm = T),
median_qsec = median(qsec, na.rm =T),
var_qsec = var(qsec, na.rm = T),
sd_qsec = sd(qsec, na.rm = T))
mc_part3 %>%
group_by(manufacturer, drv) %>%
summarise(mean_qsec = mean(qsec, na.rm = T),
sum_qsec = sum(qsec, na.rm = T),
median_qsec = median(qsec, na.rm =T),
var_qsec = var(qsec, na.rm = T),
sd_qsec = sd(qsec, na.rm = T))
## 이상치 찾고 처리하기. - outlier
outlier -data.frame(Pclass = c(1,2,3,4,4,55,3,1,1,2),
outlier
## 이상치 찾고 처리하기. - outlier
outlier -data.frame(Pclass = c(1,2,3,4,4,55,3,1,1,2),
family = c(1,2,3,1,2,3,1,1,1))
outlier
## 이상치 찾고 처리하기. - outlier
outlier <- data.frame(Pclass = c(1,2,3,4,4,55,3,1,1,2),
family = c(1,2,3,1,2,3,1,1,1))
## 이상치 찾고 처리하기. - outlier
outlier <- data.frame(Pclass = c(1,2,3,4,4,55,3,1,1,2),
family = c(1,2,3,1,2,3,1,1,1,2))
outlier
library(ggplot2)
ggplot(data = outlier, aes(x=Pclass, y=family)) +geom_point()
ggplot(data = outlier, aes(x=Pclass, y=family)) +geom_bar()
ggplot(data = outlier, aes(x=Pclass) +geom_bar()
ggplot(data = outlier, aes(x=Pclass)) +geom_bar()
ggplot(outlier, aes(x=Pclass)) +geom_bar()
outlier$Pclass %in%  c(1,2,3)
? %in%
## %notin%
install.packages("Hmisc")
library("Hmisc")
%notin% <-Negate( %in% )
outlier$Pclass %in%  c(1,2,3)
'%notin%' <-Negate( %in% )
'%notin%' <-Negate(' %in%' )
'%notin%' <-Negate('%in%')
outlier$Pclass %in%  c(1,2,3)
#dat[행, 열]
outlier[!(Pclass %in% c(1,2,3))]
#dat[행, 열]
outlier[!(Pclass %in% c(1,2,3)),]
#dat[행, 열]
outlier[!(outlier$Pclass %in% c(1,2,3)),]
outlier[outlier$Pclass %notin% c(1,2,3), ]
outlier$Pclass %notin% c(1,2,3)
!outlier$Pclass %in% c(1,2,3)
table(outlier$Pclass)
outlier
outlier$family
outlier$family %notin%  c(1,2)
outlier[!outlier$family %notin% c(1,2), ]
table(outlier$family)
outlier[!outlier$family %in% c(1,2), ]
outlier$family %notin%  c(1,2)
!outlier$family %in% c(1,2)
outlier[outlier$family %notin%c(1,2)]
outlier[outlier$family %notin%c(1,2)
outlier[outlier$family %notin% c(1,2),]
outlier[outlier$family %notin% c(1,2),]
table(outlier$family)
table(outlier$Pclass)
outlier <- ifelse(is.na(outlier$Pclass), 1, outlier$Pclass)
table(is.na(outlier$Pclass))
##결측치 대체
table(outlier$family)
table(outlier$Pclass)
##결측치 대체
table(outlier$family)
outlier[(!outlier$family %in% c(1,2)), 'Pclass'] =1
library(rJava)
library(memoise)
library(KoNLP)
##
useNIADic()
txt <- readLines("SpiderMan.txt")
head(text)
txt <- readLines("SpiderMan.txt")
head(text)
head(txt)
txt <- readLines("SpiderMan.txt")
head(txt)
length(txt)
is(txt)
##문자열처리
install.packages('stringr')
install.packages("stringr")
library(stringr)
head(txt)
##tab 없애주기 (특수문자 제거)
txt <-str_replace_all(txt, "\\w", " ")
head(txt)
##tab 없애주기 (특수문자 제거)
txt <-str_replace_all(txt, "\\W", " ")
head(txt)
txt <- readLines("SpiderMan.txt")
head(txt)
##tab 없애주기 (특수문자 제거)
txt <-str_replace_all(txt, "\\W", " ")
head(txt)
##tab 없애주기 (특수문자 제거)
txt <-str_replace_all(txt, "\\W", " ")
head(txt)
#명사 추출
extractNoun("오늘은 즐거운 날이다. 당신은 소중한 사람입니다.")
nouns <- exctractNoun(txt)
#명사 추출
library(KoNLP)
nouns <- exctractNoun(txt)
nouns <- extractNoun(txt)
nouns
is(nouns)
wordCount <- table(unlist(nouns)) #한줄로쫙
wordCount
#데이터 프래임 전환
df_word <-as.data.frame(wordCount, stringAsFactors = F)
df_word
unlist(nouns)
df_word <- rename(df_word, word=Var1)
df_word
### wordcloud
install.packages('wordcloud')
library(wordcloud)
library(RColorBrewer)
### 색상추출
pal <- brewer.pal(8, "Dark2")
set.seed(1004)
#워드클라우드
wordcloud(word = df_word)
#워드클라우드
wordcloud(word = df_word$word,
freq = df_word$freq,
color = pal)
#워드클라우드
wordcloud(word = df_word$word,
freq = df_word$freq,
color = pal,
random.order = T)
nrow(df_word) #행 갯수
df_word <- rename(df_word, word=Var1, freq = Freq)
#데이터 프래임 전환
df_word <-as.data.frame(wordCount, stringAsFactors = F)
df_word
df_word <- rename(df_word, word=Var1, freq = Freq)
df_word
#워드클라우드
wordcloud(word = df_word$word,
freq = df_word$freq,
color = pal,
random.order = T,
rot.per = 0.4, #rotation
max.words = 100) #단어갯수
# install.packages("ggiraphExtra")
knitr::opts_chunk$set(echo = TRUE)
library(ggiraphExtra)
# install.packages("ggiraphExtra")
install.packages("ggiraphExtra")
library(ggiraphExtra)
search()```
str(USArrests)
head(USArrests)
dim(USArrests)
head(USArrests)
str(USArrests)
dim(USArrests)
library(dplyr)
df <-read.csv("student.csv")
table(df$class)
library(tibble)
crime <- rownames_to_column(USArrests, var = 'state')
crime$state <- tolower(crime$state)
crime
## 02 몇 개의 club가 존재하는지 알아보고 각 club 별 인원 수를 알아보자
table(df$club)
## 03 컬럼별로 몇 개의 결측치가 존재하는지 알아보자, 결측치가 존재하는 컬럼명을 적으시오.
colSums(df)
## 03 컬럼별로 몇 개의 결측치가 존재하는지 알아보자, 결측치가 존재하는 컬럼명을 적으시오.
colSums(df)
library(ggplot2)
library(maps)
```{r}
```{r}
library(ggplot2)
library(maps)
```{r}
```{r}
## 03 컬럼별로 몇 개의 결측치가 존재하는지 알아보자, 결측치가 존재하는 컬럼명을 적으시오.
df$class(is.na(df))
## 03 컬럼별로 몇 개의 결측치가 존재하는지 알아보자, 결측치가 존재하는 컬럼명을 적으시오.
table(is.na(df))
table(!is.na(df))
## 03 컬럼별로 몇 개의 결측치가 존재하는지 알아보자, 결측치가 존재하는 컬럼명을 적으시오.
table(is.na(df$name))
table(is.na(df$class))
table(is.na(df$club))
table(is.na(df$math))
table(is.na(df$english))
## 03 컬럼별로 몇 개의 결측치가 존재하는지 알아보자, 결측치가 존재하는 컬럼명을 적으시오.
table(!is.na(df$name))
table(!is.na(df$class))
table(!is.na(df$club))
table(!is.na(df$math))
table(!is.na(df$english))
table(!is.na(df$english))
table(!is.na(df$eng))
## 04 영어 결측치를 제외하고,
## 05 클래스별로 그룹지어
## 06 클래스 별 영어 평균 점수 구하기
mean_classEng <- df %>%
filter(!is.na(eng)) %>%
group_by(class) %>%
mean_eng = mean(eng, na.rm = T)
## 04 영어 결측치를 제외하고,
## 05 클래스별로 그룹지어
## 06 클래스 별 영어 평균 점수 구하기
mean_classEng <- df %>%
filter(!is.na(eng)) %>%
group_by(class) %>%
(mean_eng = mean(eng))
## 04 영어 결측치를 제외하고,
## 05 클래스별로 그룹지어
## 06 클래스 별 영어 평균 점수 구하기
mean_classEng <- df %>%
filter(!is.na(eng)) %>%
group_by(class) %>%
mean_eng = mean(df$eng)
## 04 영어 결측치를 제외하고,
## 05 클래스별로 그룹지어
## 06 클래스 별 영어 평균 점수 구하기
mean_classEng <- df %>%
filter(!is.na(eng)) %>%
group_by(class) %>%
summarise (mean_eng = mean(eng))
mean_classEng
mean_classMath <- df %>%
filter(!is.na(math)) %>%
group_by(class) %>%
summarise(mean_math = mean(math))
mean_classMath
```{r}
install.packages("maps")
crime <- rownames_to_column(USArrests, var = 'state')
crime$state <- tolower(crime$state)
crime
library(ggplot2)
library(maps)
mean_eng <- df %>%
filter(!is.na(eng)) %>%
mean(df$eng)
mean_eng <- df %>%
filter(!is.na(eng)) %>%
mean(df_nomiss$eng)
mean_eng <- df %>%
filter(!is.na(eng)) %>%
mean(df$eng, na.rm = T)
mean_eng <- df %>%
filter(!is.na(eng)) %>%
summarise(df$eng)
mean_eng <- df %>%
filter(!is.na(eng)) %>%
summarise(mean_eng = mean(eng))
mean_eng
mean_math <- df %>%
filter(!is.na(math)) %>%
summarise(mean_math = mean(math))
mean_math
## 14 영어점수가 전체 영어 평균 점수(mean_eng) 이상이면 'PASS', 아니면 'FAIL'
df %>%
mutate(eng_result= ifelse(df$eng >= 69.5, "pass" , "fail"),
ifelse(df$math >= 73.1, "pass", "fail"))
## 14 영어점수가 전체 영어 평균 점수(mean_eng) 이상이면 'PASS', 아니면 'FAIL'
df %>%
mutate(eng_result= ifelse(df$eng >= 69.5, "pass" , "fail")|
ifelse(df$math >= 73.1, "pass", "fail"))
## 14 영어점수가 전체 영어 평균 점수(mean_eng) 이상이면 'PASS', 아니면 'FAIL'
df %>%
mutate(eng_result= ifelse(df$eng >= 69.5, "pass" , "fail"),
ifelse(df$math >= 73.1, "pass", "fail"))
df %>%
mutate(eng_result= ifelse(df$eng >= mean_eng, "pass" , "fail"),
ifelse(df$math >= mean_math, "pass", "fail"))
## 14 영어점수가 전체 영어 평균 점수(mean_eng) 이상이면 'PASS', 아니면 'FAIL'
df %>%
mutate(eng_result= ifelse(df$eng >= 69.5, "pass" , "fail"),
ifelse(df$math >= 73.1, "pass", "fail"))
## 14 영어점수가 전체 영어 평균 점수(mean_eng) 이상이면 'PASS', 아니면 'FAIL'
df %>%
mutate(eng_result= ifelse(df$eng >= 69.5, "pass" , "fail"),
ifelse(df$math >= 73.1, "pass", "fail"))
## 14 영어점수가 전체 영어 평균 점수(mean_eng) 이상이면 'PASS', 아니면 'FAIL'
df %>%
mutate(eng_result= ifelse(df$eng >= 69.5, "pass" , "fail"),
math_result= ifelse(df$math >= 73.1, "pass", "fail"))
source('~/.active-rstudio-document', encoding = 'UTF-8')
