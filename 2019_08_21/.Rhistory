exam <- read.csv("csv_exam.csv")
exam <- read.csv("csv_exam.csv")
exam <- read.csv("C:\Users\LGULTRA\Desktop\R\2019_08_21\csv_exam.csv")
exam <- read.csv("C:\\Users\\LGULTRA\\Desktop\\R\\2019_08_21\\csv_exam.csv")
head()
head(exam)
tail(exam)
head(exam,10)
tail(exam,10)
View(exam)
dim(exam)
str(exam)
summary(exam)
#직접 해보세요
install.packages("ggplot2")
libary(ggplot2)
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
tail(mpg)
View(mpg)
dim(mpg)
str(mpg)
summary()
summary(mpg)
#변수명 바꾸기
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
df_raw <- data.frame(var1 = c(1,2,1),
var2 = c(2,3,2))
df_raw
df_new <- df_raw #원본데이터 손상되지 않게 수정 먼저 해주기
df_new <- rename(df_new, v2 = var2)
df_new
df_new <-rename(df_new, v1 = var1)
df_new
##혼자서 해보기
mpg_new <- mpg
mpg_new
mpg_new <- (mpg_new, "city" = "cty")
mpg_new <- (mpg_new, city = cty)
mpg_new <- (mpg_new, city = cty)
mpg_new <- rename(mpg_new, city = cty)
mpg_new <- rename(mpg_new, highway = hwy)
names(mpg_new)
df <-data.frame(var1 = c(4,3,8),
var2 = c(2,6,1))
df
df$var_sum <- df$var1 + df$var2
df
df$var_mean <- (df$var1 + df$var2)/2
df
##직접해보세요
mn <- mpg_new
mn$total <- mn$city + mn$highway
mn$total <- (mn$city + mn$highway)/2
names(mn)
head(mn)
mean(mn$total)
##직접해보세요
summary(mn$total)
hist(mn$total)
ifelse(mn$total >=20, "pass", "fail")
mn$test <-ifelse(mn$total >=20, "pass", "fail")
head(mn, 10)
table(mn$test)
qplot(mn$test)
mn$grade <- ifelse(mn$total >= 30, "A",
ifelse(mn$total >= 20, "B", "C"))
head(mpg,20)
head(mn,20)
table(mn$grade)
qplot(mn$grade)
head(exam,4)
tail(exam,4)
dt <- as.data.frame(ggplot2::midwest)
dt_new <- dt #그냥 복사해오기
dt_new <- rename (dt_new, total = poptotal)
dt_new <- rename (dt_new, asianp = popasian)
names(dt_new)
dt_new$w_per <- (dt_new$popwhite/dt_new$total)*100
hist(dt_new$w_per)
mean(dt_new$w_per)
dt_new$group <- ifelse(dt_new$w_per > 95.56, "large", "small")
head(dt_new$group)
table(dt_new$group)
qplot(dt_new$group)
rm(list(Is))
rm(IS(list))
rm(Is(list))
library(dplyr)
exam <- read.csv("csv_exam.csv")
exam
#1반만 추출
exam %>%  filter(class ==1)
#2반만 추출
exam %>%  filter(class == 2)
#2반이 아닌 경우
exam %>%  filter(class != 2)
exam %>% filter(science >= 80)
exam %>% filter(class == 2 & english >80)
exam %>%filter(math >90 | english >90)
exam %>% filter(class == 1| class == 4 |class == 5)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
class 1 <- exam %>% filter(class == 1)
class1 <- exam %>% filter(class == 1)
class2 <- exam %>% filter(class == 2)
mean(class$english)
mean(class1$english)
mean(class2$english)
##혼자서해보기 -p133 응용
disp1 <-mpg %>% filter(displ <4)
disp2 <-mpg %>% filter(displ >5)
mean(displ$hwy)
##혼자서해보기 -p133 응용
mpg <- as.data.frame(ggplot2::mpg)
disp1 <-mpg %>% filter(displ <4)
disp2 <-mpg %>% filter(displ >5)
mean(disp1$hwy)
mean(disp2$hwy)
#Q2
class1<- mpg %>% filter(manufacturer == toyota)
#Q2
class1<- mpg %>% filter(manufacturer == "toyota")
class2<- mpg %>% filter(manufacturer == "audi")
mean(class1$cty)
mean(class2$cty)
#Q3
sample <- mpg %>% filter(manufacturer %in% c("chevrolet", "ford", "honda") )
mean(sample$hwy)
##필요만 변수만 추출하기
###영어 추출
exam %>% select(english)
##여러 변수 추출하기
exam %>%  select(class, math, science)
##변수 제외 -아래 예시는 과학 제외
exam %>%  select(-science)
##변수 제외 -아래 예시는 과학&영어 제외
exam %>%  select(-science, -english)
##filter와 select조합
##2반 학생들 수학을 뽑아보자
exam %>%filter(class ==2) %>% select(math)
#혼자서해보기p138
neu_dt <- mpg %>% select(class, cty)
names(neu_dt)
head(neu_dt)
#Q2
dt_suv <- neu_dt %>% (class = suv)
#Q2
dt_suv <- neu_dt %>% (class = Suv)
#Q2
dt_suv <- neu_dt %>% (class = "Suv")
#Q2
dt_suv <- neu_dt %>% filter(class = "Suv")
#Q2
dt_suv <- neu_dt %>% filter(class = "suv")
#Q2
dt_suv <- neu_dt %>% filter(class == "suv")
dt_compact <- neu_dt %>% filter(class == "compact")
mean(dt_suv)
mean(dt_suv$cty)
mean(dt_compact$cty)
##오름차순으로 정렬
###영어 점수 낮은->높은으로 정렬하기
exam %>% arrange(english)
### 내림차순 으로 정렬/ desc 추가
exam %>% arrange(desc(english)
### 내림차순 으로 정렬/ desc 추가
exam %>% arrange(desc(english))
### 내림차순 으로 정렬/ desc 추가
exam %>% arrange(desc(english))
###반으로 먼저 정렬 -> 영어 오름차순으로 정렬
exam %>% arange(class, english)
###반으로 먼저 정렬 -> 영어 오름차순으로 정렬
exam %>% arrange(class, english)
#혼자서해보기 p141
#Q1
audi <- mpg %>% filter(manufactuer == "audi")
#혼자서해보기 p141
#Q1
audi <- mpg %>% filter(manufacturer == "audi")
View(audi)
audi %>% arrange(hwy)
audi %>% arrange(desc(hwy))
head(audi, 10)
head(audi, 5)
#혼자서해보기 p141
#Q1
audi <- mpg %>% filter(manufacturer == "audi")
audi %>% arrange(desc(hwy)) %>%
head(5)
#OTHER VER.
audi <- mpg %>% filter(manufacturer == 'audi') %>% arrange(desc(hwy)) %>% head(5)
audi
##파생변수 추가하기 muatate 이용
###total 열을 새로 만들어 주기
exam %>% mutate(total = math+english+science) %>% head
head
mean = (math+english+science/3)
###여러 파생변수 한꺼번에 추가
###mean도 추가해 보기
exam %>% mutate(total = math+english+science,
mean = (math+english+science)/3)) %>% head
###여러 파생변수 한꺼번에 추가
###mean도 추가해 보기
exam %>% mutate(total = math+english+science,
mean = (math+english+science)/3) %>% head
###mutate에 ifelse적용
##test항목에 영어 80점 이상이면 pass 행 추가
exam %>% mutate(test = ifelse(english >=80, "pass", "fail")) %>% head
###mutate에 ifelse적용
##test항목에 영어 80점 이상이면 pass 행 추가
exam %>% mutate(test = ifelse(english >=80, "pass", "fail")) %>% head(10)
##총합을 오름차순으로 정리하기
exam %>% mutate (total = math+science+english) %>% arrange(total) %>% head(5)
#혼자서 해보기 p144
#Q1
mpg_neu <- mpg
total_ratio <- mpg_neu %>% mutate((cty+hwy)/2)
total_ratio <- mpg_neu %>% mutate((cty+hwy)/2) %>% head
total_ratio
head(total_ratio)
total_ratio <- mpg_neu %>% mutate(total = cty+hwy)
head(total_ratio)
add <- total_ratio %>%  mutate(mean(total_ratio)/2)
add <- total_ratio %>%  mutate(mean = (total_ratio)/2)
add <- total_ratio %>%  mutate(mean = total_ratio/2)
add <- total_ratio %>%  mutate(mean = total/2)
#혼자서 해보기 p144
#Q1
mpg_neu <- mpg
mpg_neu <- mpg_neu %>% mutate(total = cty+hwy)
head(total_ratio)
head(5)
head(mpg_neu,5)
mpg_neu <- mpg_neu %>%mutate(mean = total/2)
head(mpg_neu, 5)
#Q3
mpg_neu <- mpg_neu %>%mutate(mean = total/2) %>% arrange(mean) %>% head(3)
head(mpg_neu,3)
#Q3
mpg_neu <- mpg_neu %>%mutate(mean = total/2) %>% arrange(desc(mean) %>% head(3)
head(mpg_neu,3)
#Q3
mpg_neu <- mpg_neu %>%mutate(mean = total/2) %>% arrange(desc(mean)) %>% head(3)
head(mpg_neu,3)
#혼자서 해보기 p144
#Q1
mpg_neu <- mpg
mpg_neu <- mpg_neu %>% mutate(total = cty+hwy)
head(mpg_neu,5)
#Q
mpg_neu <- mpg_neu %>%mutate(mean = total/2)
head(mpg_neu, 5)
#Q3
mpg_neu <- mpg_neu %>%mutate(mean = total/2) %>% arrange(desc(mean)) %>% head(3)
head(mpg_neu,3)
#Q4
mpg %>% mutate(total = (cty+hwy), mean = total/2) %>% arrange(desc(mean)) %>% head(3)
##집단별로 요약하기 - summarise, mutate
#반 별 영어평균 구해보기
exam %>% summarise(mean_english = mean(english))
##아래가 베이스코드
exam %>%
group_by(class) %>%
summarise(mean_english = mean(english))
#summarise도 여러 요약 통계량을 한꺼번에 산출할 수 있음
exam %>%
group_by(class) %>%
summarise (mean_math = mean(math),
sum_math = sum(math),
median_math = median(math),
n=n()) #이건 학생 수
#각 집단별로 다시 나누기:group by
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty)) %>%
head(10)
mutate(total = (cty+hwy)/2
#직접해보세요 p148
mpg %>%
#직접해보세요 p148
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(total = (cty+hwy)/2)
summarise(mean_tot = mean(tot)) %>%
arrange(desc(tot)) %>%
head(5)
#직접해보세요 p148
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(tot = (cty+hwy)/2)
#직접해보세요 p148
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(tot = (cty+hwy)/2)
arrange(desc(mean(cty)) %>%
summarise (mean_cty = mean(cty)) %>%
#직접해보세요 p150
#Q1
mpg %>%
group_by (class) %>%
summarise (mean_cty = mean(cty)) %>%
head(5)
#직접해보세요 p150
#Q1
mpg <- as.data.frame(ggplot2::mpg)
mpg %>%
group_by (class) %>%
summarise (mean_cty = mean(cty)) %>%
head(5)
#Q2
mpg %>%
group_by (class) %>%
summarise (mean_cty = mean(cty)) %>%
arrange(mean(cty))
#Q2
mpg %>%
group_by (class) %>%
summarise (mean_cty = mean(cty)) %>%
arrange(desc(mean))
#Q2
mpg %>%
group_by (class) %>%
summarise (mean_cty = mean(cty)) %>%
arrange (desc(mean))
#직접해보세요 p150
#Q1
mpg <- as.data.frame(ggplot2::mpg)
#Q2
mpg %>%
group_by (class) %>%
summarise (mean_cty = mean(cty)) %>%
arrange (desc(mean))
#Q2
mpg %>%
group_by (class) %>%
summarise (mean_cty = mean(cty)) %>%
arrange (desc(mean))
#Q2
mpg %>%
group_by (class) %>%
summarise (mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
#Q3
mpg %>%
group_by(manufacturer) %>%
summarise (mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(3)
source('C:/Users/LGULTRA/Desktop/R/2019_08_21/01_2019_08_21_mpg.R', encoding = 'UTF-8', echo=TRUE)
install.packages("ggplot2")
